import io
import cv2
import dlib
import face_recognition
import base64
from PIL import Image
import numpy as np
import urllib.request as ur

detector = dlib.get_frontal_face_detector()


def get_image_with_landmarks(imageSelfie, imageDataList):
    # rects = None
    # gray = None
    # clone = None
    #
    # try:
    #     # image = cv2.imread(file_path, 1)
    #     # image = Resizer(image, height=240)
    #     # gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    #     # clone = image.copy()
    #     # rects = detector(gray, 1)
    #
    # except Exception:
    #     return {'error': 'Error while reading the image'}

    # decoded = ur.urlopen('https://awsimages.detik.net.id/visual/2022/06/19/tesla-muskdogecoin-lawsuit_169.jpeg?w=715&q=90')

    # base64_str = ''

    buffer = io.BytesIO()
    imgdata = base64.b64decode(imageSelfie)
    img = Image.open(io.BytesIO(imgdata))
    new_img = img.resize((400, 400))  # x, y
    new_img.save(buffer, format="jpeg")

    # decoded = ur.urlopen(image)
    image_loaded = face_recognition.load_image_file(buffer)
    imgTest = face_recognition.load_image_file('data_images/sby-1.png')
    # img_b64 = base64.b64encode(buffer.getvalue())
    # print(str(img_b64)[2:-1])


    # daa = img.resize((400, 400))
    gray = cv2.cvtColor(image_loaded, cv2.COLOR_BGR2GRAY)
    rects = detector(gray, 1)

    any_face_was_found = len(rects) > 0
    if any_face_was_found:
        # for (i, rect) in enumerate(rects):
        #     shape = predictor(gray, rect)
        #     shape = face_utils.shape_to_np(shape)
        #
        #     for point in range(1, 68):
        #         coords = shape.tolist()[point]
        #         cv2.circle(clone, (coords[0], coords[1]), 1, (0, 0, 255), thickness=2)

        # imgElon = face_recognition.load_image_file(image_loaded)
        imgElon = cv2.cvtColor(image_loaded, cv2.COLOR_BGR2RGB)
        imgTest = cv2.cvtColor(imgTest, cv2.COLOR_BGR2RGB)

        faceLoc = face_recognition.face_locations(imgElon)[0]
        encodeElon = face_recognition.face_encodings(imgElon)[0]
        cv2.rectangle(imgElon, (faceLoc[3], faceLoc[0]), (faceLoc[1], faceLoc[2]), (255, 0, 255), 2)

        faceLoc2 = face_recognition.face_locations(imgTest)[0]
        encodeTest = face_recognition.face_encodings(imgTest)[0]
        cv2.rectangle(imgTest, (faceLoc2[3], faceLoc2[0]), (faceLoc2[1], faceLoc2[2]), (255, 0, 255), 2)

        results = face_recognition.compare_faces([encodeElon], encodeTest)
        face_distance = face_recognition.face_distance([encodeElon], encodeTest)
        print(results, face_distance)
    else:
        return {'error': 'No face was detected in the image provided'}

    # retval, buffer = cv2.imencode('.jpg', clone)
    # image_as_text = base64.b64encode(buffer)

    # return {'image_with_landmarks': 'data:image/png;base64,{}'.format(quote(image_as_text))}
    return {'confidence': format(face_distance)}

# ekstrak jadi library / jadiin API

# https://youtu.be/sz25xxF_AVE?t=994
